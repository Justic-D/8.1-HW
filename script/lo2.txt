Limit: 200 row(s)  (cost=0.00..0.00 rows=0) (actual time=12.880..12.952 rows=200 loops=1)
    -> Table scan on <temporary>  (cost=2.50..2.50 rows=0) (actual time=12.878..12.928 rows=200 loops=1)
        -> Temporary table with deduplication  (cost=0.00..0.00 rows=0) (actual time=12.876..12.876 rows=642 loops=1)
            -> Window aggregate with buffering: sum(payment.amount) OVER (PARTITION BY c.customer_id )   (actual time=9.619..12.480 rows=642 loops=1)
                -> Sort: c.customer_id  (actual time=9.580..9.738 rows=642 loops=1)
                    -> Stream results  (cost=793.03 rows=634) (actual time=0.103..9.215 rows=642 loops=1)
                        -> Nested loop inner join  (cost=793.03 rows=634) (actual time=0.094..8.553 rows=642 loops=1)
                            -> Nested loop inner join  (cost=571.13 rows=634) (actual time=0.088..6.962 rows=642 loops=1)
                                -> Nested loop inner join  (cost=349.23 rows=634) (actual time=0.056..2.353 rows=634 loops=1)
                                    -> Filter: ((r.rental_date >= TIMESTAMP'2005-07-30 00:00:00') and (r.rental_date <= TIMESTAMP'2005-07-30 23:59:59'))  (cost=127.33 rows=634) (actual time=0.037..0.733 rows=634 loops=1)
                                        -> Covering index range scan on r using rental_date over ('2005-07-30 00:00:00' <= rental_date <= '2005-07-30 23:59:59')  (cost=127.33 rows=634) (actual time=0.034..0.527 rows=634 loops=1)
                                    -> Single-row index lookup on c using PRIMARY (customer_id=r.customer_id)  (cost=0.25 rows=1) (actual time=0.002..0.002 rows=1 loops=634)
                                -> Index lookup on p using payment_date_ID (payment_date=r.rental_date)  (cost=0.25 rows=1) (actual time=0.006..0.007 rows=1 loops=634)
                            -> Single-row covering index lookup on i using PRIMARY (inventory_id=r.inventory_id)  (cost=0.25 rows=1) (actual time=0.002..0.002 rows=1 loops=642)