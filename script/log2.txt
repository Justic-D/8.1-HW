Limit: 200 row(s)  (cost=0.00..0.00 rows=0) (actual time=11.332..11.404 rows=200 loops=1)
    -> Table scan on <temporary>  (cost=2.50..2.50 rows=0) (actual time=11.330..11.381 rows=200 loops=1)
        -> Temporary table with deduplication  (cost=0.00..0.00 rows=0) (actual time=11.328..11.328 rows=642 loops=1)
            -> Window aggregate with buffering: sum(payment.amount) OVER (PARTITION BY c.customer_id )   (actual time=8.366..10.926 rows=642 loops=1)
                -> Sort: c.customer_id  (actual time=8.328..8.443 rows=642 loops=1)
                    -> Stream results  (cost=794.53 rows=634) (actual time=0.063..7.957 rows=642 loops=1)
                        -> Nested loop inner join  (cost=794.53 rows=634) (actual time=0.056..7.284 rows=642 loops=1)
                            -> Nested loop inner join  (cost=572.63 rows=634) (actual time=0.052..5.836 rows=642 loops=1)
                                -> Nested loop inner join  (cost=350.73 rows=634) (actual time=0.036..2.352 rows=634 loops=1)
                                    -> Filter: ((r.rental_date >= TIMESTAMP'2005-07-30 00:00:00') and (r.rental_date <= TIMESTAMP'2005-07-30 23:59:59'))  (cost=128.83 rows=634) (actual time=0.026..0.709 rows=634 loops=1)
                                        -> Covering index range scan on r using rental_date over ('2005-07-30 00:00:00' <= rental_date <= '2005-07-30 23:59:59')  (cost=128.83 rows=634) (actual time=0.023..0.502 rows=634 loops=1)
                                    -> Single-row index lookup on c using PRIMARY (customer_id=r.customer_id)  (cost=0.25 rows=1) (actual time=0.002..0.002 rows=1 loops=634)
                                -> Index lookup on p using payment_date_ID (payment_date=r.rental_date)  (cost=0.25 rows=1) (actual time=0.004..0.005 rows=1 loops=634)
                            -> Single-row covering index lookup on i using PRIMARY (inventory_id=r.inventory_id)  (cost=0.25 rows=1) (actual time=0.002..0.002 rows=1 loops=642)