-> Limit: 200 row(s)  (cost=0.00..0.00 rows=0) (actual time=34.172..34.245 rows=200 loops=1)
    -> Table scan on <temporary>  (cost=2.50..2.50 rows=0) (actual time=34.170..34.221 rows=200 loops=1)
        -> Temporary table with deduplication  (cost=0.00..0.00 rows=0) (actual time=34.168..34.168 rows=642 loops=1)
            -> Window aggregate with buffering: sum(payment.amount) OVER (PARTITION BY c.customer_id )   (actual time=31.284..33.770 rows=642 loops=1)
                -> Sort: c.customer_id  (actual time=31.237..31.352 rows=642 loops=1)
                    -> Stream results  (cost=3467.55 rows=1779) (actual time=0.131..30.927 rows=642 loops=1)
                        -> Nested loop inner join  (cost=3467.55 rows=1779) (actual time=0.121..30.275 rows=642 loops=1)
                            -> Nested loop inner join  (cost=2845.06 rows=1779) (actual time=0.116..28.947 rows=642 loops=1)
                                -> Nested loop inner join  (cost=2222.57 rows=1779) (actual time=0.105..27.747 rows=642 loops=1)
                                    -> Filter: ((p.payment_date >= TIMESTAMP'2005-07-30 00:00:00') and (p.payment_date <= TIMESTAMP'2005-07-30 23:59:59'))  (cost=1605.55 rows=1757) (actual time=0.088..24.496 rows=634 loops=1)
                                        -> Table scan on p  (cost=1605.55 rows=15813) (actual time=0.065..21.761 rows=16044 loops=1)
                                    -> Covering index lookup on r using rental_date (rental_date=p.payment_date)  (cost=0.25 rows=1) (actual time=0.003..0.005 rows=1 loops=634)
                                -> Single-row index lookup on c using PRIMARY (customer_id=r.customer_id)  (cost=0.25 rows=1) (actual time=0.002..0.002 rows=1 loops=642)
                            -> Single-row covering index lookup on i using PRIMARY (inventory_id=r.inventory_id)  (cost=0.25 rows=1) (actual time=0.002..0.002 rows=1 loops=642)
